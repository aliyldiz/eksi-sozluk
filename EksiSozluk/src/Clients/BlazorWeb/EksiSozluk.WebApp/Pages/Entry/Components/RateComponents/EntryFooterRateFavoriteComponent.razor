<div class="container">
    <span>
        <a class="p-1" title="Up vote!">
            <i class="fas fa-arrow-up @(Vote == VoteType.UpVote ? "text-success" : "text-secondary")" @onclick="UpClicked"></i>
        </a>
        <a class="p-3" title="Down vote!">
            <i class="fas fa-arrow-down @(Vote == VoteType.DownVote ? "text-danger" : "text-secondary")" @onclick="DownClicked"></i>
        </a>

        <EntryFooterFavoriteComponent EntryId="@EntryId"
                                      FavoritedCount="@FavoritedCount"
                                      IsFavorited="@IsFavorited"
                                      OnFavClicked="@FavoritedClicked" />
    </span>
</div>

@code {

    [Inject]
    ISyncLocalStorageService localStorage { get; set; }

    [Parameter]
    public VoteType Vote { get; set; }

    [Parameter]
    public EventCallback<FavClickedEventArgs> OnFavClicked { get; set; }

    [Parameter]
    public EventCallback<VoteClickedEventArgs> OnVoteClicked { get; set; }

    [Parameter]
    public bool IsFavorited { get; set; }

    [Parameter]
    public Guid? EntryId { get; set; }

    [Parameter]
    public int FavoritedCount { get; set; } = 0;

    private async Task FavoritedClicked()
    {
        var ea = new FavClickedEventArgs();

        ea.EntryId = EntryId.Value;
        ea.IsFaved = !IsFavorited;
        await OnFavClicked.InvokeAsync(ea);

        StateHasChanged();
    }
    
    private async Task DownClicked()
    {
        var ea = new VoteClickedEventArgs();

        ea.EntryId = EntryId.Value;
        ea.DownVoteDeleted = Vote == VoteType.DownVote;
        ea.IsDownVoteClicked = true;

        await OnVoteClicked.InvokeAsync(ea);
        StateHasChanged();
    }

    private async Task UpClicked()
    {
        var ea = new VoteClickedEventArgs();

        ea.EntryId = EntryId.Value;
        ea.UpVoteDeleted = Vote == VoteType.UpVote;
        ea.IsUpVoteClicked = true;

        await OnVoteClicked.InvokeAsync(ea);
        
        StateHasChanged();
    }
}